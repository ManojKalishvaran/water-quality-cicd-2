name: water-quality-cicd-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - Training/**
      - inference/**
      - README.md
      - azure-pipelines.yml

pool:
  vmImage: 'ubuntu-latest'

variables:
  trainingImageName: 'water-quality-training'
  inferenceImageName: 'water-quality-inference'
  tag: 'latest'
  

stages:
- stage: Build
  displayName: 'Build & Push Docker Images'
  jobs:

  - job: LoginAndBuild
    displayName: 'Key Vault Login + Build Images'
    steps:

      ## ✅ Step 1: Pull Secrets from Key Vault
    - task: AzureKeyVault@2
      name: FetchSecrets
      inputs:
        azureSubscription: 'az-sub'
        keyVaultName: 'manoj-key-water'
        SecretsFilter: '*'
        RunAsPreJob: true


    ## ✅ Step 2: Checkout code
    - checkout: self

    ## ✅ Step 3: Build & Push Training Docker Image
    - task: Docker@2
      displayName: 'Build & Push Training Image to ACR'
      inputs:
        containerRegistry: 'acr-connection' 
        repository: '$(trainingImageName)'
        command: 'buildAndPush'
        Dockerfile: '**/Training/Dockerfile'
        tags: |
          $(tag)

    ## ✅ Step 4: Run Training Container with Azure Auth
    - script: |
        echo "Pulling training image from ACR..."
        docker pull manojacrregistry.azurecr.io/$(trainingImageName):$(tag)

        echo "Running training container with Azure credentials...using $(SPclientID)"
        docker run \
          -e AZURE_CLIENT_ID=$(SPclientID) \
          -e AZURE_CLIENT_SECRET=$(SPclientSecret) \
          -e AZURE_TENANT_ID=$(SPtenentID) \
          manojacrregistry.azurecr.io/$(trainingImageName):$(tag)
      displayName: "Run Training Container"

  - job: BuildInferenceImage
    displayName: 'Build Inference Docker Image'
    dependsOn: LoginAndBuild
    steps:
    - checkout: self
    - task: Docker@2
      displayName: 'Build & Push Inference Image to ACR'
      inputs:
        containerRegistry: 'acr-connection'  
        repository: '$(inferenceImageName)'
        command: 'buildAndPush'
        Dockerfile: '**/inference/Dockerfile'
        tags: |
          $(tag)

- stage: Deploy
  displayName: 'Deploy Inference Container to Azure App Service'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: DeployInference
    displayName: 'Deploy Inference Container'
    steps:
    - task: AzureWebAppContainer@1
      displayName: 'Deploy Inference Container to App Service'
      inputs:
        azureSubscription: 'az-sub'   
        appName: 'water-quality-api'        
        containers: 'manojacrregistry.azurecr.io/$(inferenceImageName):$(tag)'
